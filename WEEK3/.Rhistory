docs.tfidf <- docs.tf * docs.idf
head(docs.tfidf)
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
head(docs.tfidf)
tail(docs.tfidf)
query.tfidf <- function(q){
q.position <- which(rownames(docs.tfidf) %in% q)
q.tfidf <- docs.tfidf[q.position, ]
return (q.tfidf)
}
query.tfidf(c("宙斯", "女神", "赫丘力"))
cos <- function(x, y){
return (x %*% y / sqrt(x %*% x * y %*% y))[1, 1]
}
# compare with first doc
docs.cos.sim <- apply(docs.tfidf, 2, cos, y = docs.tfidf[, 1])
docs.cos.sim
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(tmcn)
library(Matrix)
library(wordcloud)
docs <- readLines("star_story.txt")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
head(docs.tfidf)
tail(docs.tfidf)
query.tfidf <- function(q){
q.position <- which(rownames(docs.tfidf) %in% q)
q.tfidf <- docs.tfidf[q.position, ]
return (q.tfidf)
}
query.tfidf(c("宙斯", "女神", "赫丘力"))
cos <- function(x, y){
return (x %*% y / sqrt(x %*% x * y %*% y))[1, 1]
}
docs.cos.sim <- apply(docs.tfidf, 2, cos, y = docs.tfidf[, 1])
docs.cos.sim
f <- sort(rowSums(docs.tfidf), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
f <- sort(rowSums(docs.tfidf), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
f <- sort(rowSums(docs.tfidf), decreasing = T)
library(tm)
library(tmcn)
library(Matrix)
library(wordcloud)
docs <- readLines("star_story.txt")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
f <- sort(rowSums(docs.tfidf), decreasing = T)
docs.cos.sim <- apply(docs.tfidf, 2, cos, y = docs.tfidf[, 1])
library(tm)
library(tmcn)
library(Matrix)
library(wordcloud)
docs <- readLines("star_story.txt")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
head(docs.tfidf)
tail(docs.tfidf)
query.tfidf <- function(q){
q.position <- which(rownames(docs.tfidf) %in% q)
q.tfidf <- docs.tfidf[q.position, ]
return (q.tfidf)
}
query.tfidf(c("宙斯", "女神", "赫丘力"))
cos <- function(x, y){
return (x %*% y / sqrt(x %*% x * y %*% y))[1, 1]
}
cos <- function(x, y){
return (x %*% y / sqrt(x %*% x * y %*% y))[1, 1]
}
# compare with first doc
docs.cos.sim <- apply(docs.tfidf, 2, cos, y = docs.tfidf[, 1])
docs.cos.sim
f <- sort(rowSums(docs.tfidf), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
f <- sort(rowSums(docs.tfidf), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
library(tm)
library(tmcn)
library(Matrix)
library(wordcloud)
docs <- readLines("star_story.txt")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
#TFIDF counting
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
head(docs.tfidf)
tail(docs.tfidf)
#Words
query.tfidf <- function(q){
q.position <- which(rownames(docs.tfidf) %in% q)
q.tfidf <- docs.tfidf[q.position, ]
return (q.tfidf)
}
query.tfidf(c("宙斯", "女神", "赫丘力"))
cos <- function(x, y){
return (x %*% y / sqrt(x %*% x * y %*% y))[1, 1]
}
# compare with first doc
docs.cos.sim <- apply(docs.tfidf, 2, cos, y = docs.tfidf[, 1])
docs.cos.sim
f <- sort(rowSums(docs.tfidf), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
docs.df
docs.df
docs.tfidf
f
f
rowSums(docs.tfidf)
docs.tfidf
is.completed(docs.df)
is.na(docs.df)
a = c(1, 2, 3, NA)
sum(a)
f <- sort(rowSums(docs.tfidf, na.rm = T), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
docs
docs.tdm
docs.corpus
inspect(docs.tdm)
docs.tfidf
head(docs.tfidf)
head(docs.tfidf)
f <- sort(rowSums(docs.tfidf, na.rm = T), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
docs
docs.df
wordcloud(docs.df$word, docs.df$freq, max.freq = 7,  scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
wordcloud(docs.df$word, docs.df$freq, max.word = 7,  scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
inspect(docs.tdm)
docs.df[, 1]
docs.df[, 1] %in% "人類"
sum(docs.df[, 1] %in% "人類")
docs.df
docs.df[1:8, ]
docs.df[-(1:8), ]
docs.df <- docs.df[-(1:8), ]
wordcloud(docs.df$word, docs.df$freq,  scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
f <- sort(rowSums(docs.tfidf, na.rm = T), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
f <- sort(rowSums(docs.tfidf, na.rm = T), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
f <- sort(rowSums(docs.tfidf, na.rm = T), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
docs.df <- docs.df[-(1:8), ]
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
f <- sort(rowSums(docs.tfidf, na.rm = T), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
docs.df <- docs.df[-(1:8), ]
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
library(tm)
library(tmcn)
library(Matrix)
library(wordcloud)
docs <- readLines("star_story.txt")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
#TFIDF counting
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
head(docs.tfidf)
tail(docs.tfidf)
#Words
query.tfidf <- function(q){
q.position <- which(rownames(docs.tfidf) %in% q)
q.tfidf <- docs.tfidf[q.position, ]
return (q.tfidf)
}
query.tfidf(c("宙斯", "女神", "赫丘力"))
cos <- function(x, y){
return (x %*% y / sqrt(x %*% x * y %*% y))[1, 1]
}
# compare with first doc
docs.cos.sim <- apply(docs.tfidf, 2, cos, y = docs.tfidf[, 1])
docs.cos.sim
f <- sort(rowSums(docs.tfidf, na.rm = T), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
docs.df <- docs.df[-(1:8), ]
knitr::opts_chunk$set(echo = TRUE)
docs.pca <- prcomp(docs.tfidf, scale = T)
library(tm)
library(tmcn)
library(Matrix)
library(wordcloud)
docs <- readLines("star_story.txt")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
#TFIDF counting
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
docs.tfidf <- docs.tfidf[-(1:8), ]
docs.pca <- prcomp(docs.tfidf, scale = T)
apply(docs.tfidf, 2, sum)
apply(docs.tfidf, 2, sum) %in% 0
apply(docs.tfidf, 2, sum)
docs.tfidf[1]
docs.tfidf[2]
docs.tfidf
as.matrix(docs.tfidf)[1]
as.matrix(docs.tfidf)[2]
as.matrix(docs.tfidf)
as.matrix(docs.tfidf)[, 1]
as.matrix(docs.tfidf)[, 1] %>% sum
sum(as.matrix(docs.tfidf)[, 1])
sum(as.matrix(docs.tfidf)[, 2])
docs.tdm
docs.corpus
docs.corpus$content
docs.corpus$content[1]
docs.corpus$content[2]
docs.corpus$content[149]
docs.tfidf
docs <- readLines("star_story.txt")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
docs.corpus
docs.corpus$content[149]
docs.corpus$content[148]
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
head(docs.tfidf)
query.tfidf <- function(q){
q.position <- which(rownames(docs.tfidf) %in% q)
q.tfidf <- docs.tfidf[q.position, ]
return (q.tfidf)
}
cos <- function(x, y){
return (x %*% y / sqrt(x %*% x * y %*% y))[1, 1]
}
# compare with first doc
docs.cos.sim <- apply(docs.tfidf, 2, cos, y = docs.tfidf[, 1])
docs.cos.sim
f <- sort(rowSums(docs.tfidf, na.rm = T), decreasing = T)
f
docs.df <- data.frame(
word = names(f),
freq = f
)
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
docs.df
docs.df <- docs.df[-(1:8), ]
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
docs <- readLines("star_story.txt", encoding = "UTF-8")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
inspect(docs.tdm)
f <- sort(rowSums(docs.tfidf, na.rm = T), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
docs.df
f
docs.df <- data.frame(
word = names(f),
freq = f
)
docs.df
docs.df
docs.df <- docs.df[-(1:8), ]
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
docs.tfidf
#TFIDF counting
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
docs.tfidf
docs <- readLines("star_story.txt")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
docs <- readLines("star_story.txt")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.corpus
docs.corpus$content[1]
docs <- readLines("star_story.txt", encoding = "UTF-8")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.seg
docs.seg[1]
docs.seg[1][1]
docs.seg[[1]][1]
docs.seg[[148]][1]
docs.seg[[149]][1]
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
#TFIDF counting
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
apply(docs.tfidf,2, sum)
apply(docs.tfidf,2, sum)[1]
docs.pca <- prcomp(docs.tfidf, scale = T)
apply(docs.tfidf,2, sum) %in% 0
which(apply(docs.tfidf,2, sum) %in% 0)
;en(apply(docs.tfidf,2, sum) %in% 0)
len(apply(docs.tfidf,2, sum) %in% 0)
length(apply(docs.tfidf,2, sum) %in% 0)
docs.tfidf
docs.pca <- prcomp(docs.tfidf, scale = T)
docs.tfidf
docs.pca <- prcomp(docs.tfidf, scale = T)
docs.tfidf[, 1]
var(docs.tfidf[, 1])
docs.pca <- prcomp(docs.tfidf, scale = T)
dim(docs.tfidf)
colSums(docs.tfidf)
docs.tfidf
row.names(docs.tfidf)
prcomp(docs.tfidf[-1], scale = T)
docs.tfidf[-1]
docs.tfidf[-1, ]
prcomp(docs.tfidf[-1], , scale = T)
prcomp(docs.tfidf[-1, ] , scale = T)
rowSums(docs.tfidf)
rowSums(docs.tfidf, na.rm = T)
docs.tfidf
prcomp(docs.tfidf[, -124] , scale = T)
docs <- readLines("star_story.txt", encoding = "UTF-8")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
#TFIDF counting
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
docs.pca <- prcomp(docs.tfidf, scale = T)
library(tm)
library(tmcn)
library(Matrix)
library(wordcloud)
docs <- readLines("star_story.txt", encoding = "UTF-8")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
#TFIDF counting
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
docs.pca <- prcomp(docs.tfidf, scale = T)
library(tm)
library(tmcn)
library(Matrix)
library(wordcloud)
docs <- readLines("star_story.txt")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
library(tm)
library(tmcn)
library(Matrix)
library(wordcloud)
docs <- readLines("star_story.txt", encoding = "UTF-8")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
#TFIDF counting
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
docs.pca <- prcomp(docs.tfidf, scale = T)
fviz_eig(docs.pca)
library(tm)
library(tmcn)
library(factoextra)
install.packages("factoextra")
library(tm)
library(tmcn)
library(factoextra)
library(Matrix)
docs <- readLines("star_story.txt", encoding = "UTF-8")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
#TFIDF counting
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
docs.pca <- prcomp(docs.tfidf, scale = T)
fviz_eig(docs.pca)
fviz_pca_ind(docs.pca, geom.ind = c("point"), col.ind = "cos2")
fviz_pca_var(docs.pca, col.var = "contrib")
fviz_pca_biplot(docs.pca, geom.ind = "point")
docs.eig <- get_eig(docs.pca)
docs.var <- get_pca_var(docs.pca)
docs.ind <- get_pca_ind(docs.pca)
ind.coord2 <- docs.ind$coord[, 1:2]
wss <- c()
for (i in 1:10) { wss[i] <- kmeans(ind.coord2, i)$tot.withinss }
plot(wss, type = "b")
km <- kmeans(ind.coord2, 3)
plot(ind.coord2, col = km$cluster)
points(km$centers, col = 1:3, pch = 8, cex = 2)
